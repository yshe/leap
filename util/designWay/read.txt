1.简单工厂模式：
	主要用于创建对象。新添加类时，不会影响以前的系统代码。
	核心思想是：用一个工厂来 根据输入的条件产生不同的类，然后根据不同类的子类得到不同的结果。 




接口型模式
1.适配器模式：
适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本接口不匹配而无法在一起工作 的两个类能够在一起工作。
适用情景：
①.系统需要使用现有的类，而此类的接口不符合系统的要求；
②.要建立一个可以重复使用的类，用于与该类之间关联不大的一些类，包括工作中引进的类。这些基类 不一定存在复杂的接口
用通俗的语言来说，为了方便代码的组织与模型的准确表示，
该模式在组织代码中的作用是可以把一个类 中的成员插到另一个类的继承子类中，
从而让这个继承的子类看起来像一个新类，同时可以对父类减少依赖。

2.外观模式：
将一个系统划分为若干个子系统有利于降低系统的复杂性。
在实际开发中，一种比较常见的设计目标是使 子系统间的通信和相互依赖关系达到小。
达到该目标的途径之一就是引入一个外观对象，为各个子系统提供 一个单一而简单的界面。
